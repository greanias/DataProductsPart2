# Goals: A first look at R objects - vectors, lists, matrices, data frames.
# To make vectors "x" "y" "year" and "names"
x <- c(2,3,7,9)
y <- c(9,7,3,2)
year <- 1990:1993
names <- c("payal", "shraddha", "kritika", "itida")
# Accessing the 1st and last elements of y --
y[1]
y[length(y)]
# To make a list "person" --
person <- list(name="payal", x=2, y=9, year=1990)
person
# Accessing things inside a list --
person$name
person$x
# To make a matrix, pasting together the columns "year" "x" and "y"
# The verb cbind() stands for "column bind"
cbind(year, x, y)
# To make a "data frame", which is a list of vectors of the same length --
D <- data.frame(names, year, x, y)
nrow(D)
# Accessing one of these vectors
D$names
# Accessing the last element of this vector
D$names[nrow(D)]
# Or equally,
D$names[length(D$names)]
# Goals: A first look at R objects - vectors, lists, matrices, data frames.
source('~/.active-rstudio-document', echo=TRUE)
# Goals: A first look at R objects - vectors, lists, matrices, data frames.
# To make vectors "x" "y" "year" and "names"
x <- c(2,3,7,9)
y <- c(9,7,3,2)
year <- 1990:1993
names <- c("payal", "shraddha", "kritika", "itida")
# Accessing the 1st and last elements of y --
y[1]
y[length(y)]
# To make a list "person" --
person <- list(name="payal", x=2, y=9, year=1990)
person
# Accessing things inside a list --
person$name
person$x
# To make a matrix, pasting together the columns "year" "x" and "y"
# The verb cbind() stands for "column bind"
cbind(year, x, y)
# To make a "data frame", which is a list of vectors of the same length --
D <- data.frame(names, year, x, y)
nrow(D)
# Accessing one of these vectors
D$names
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
# Goals: A first look at R objects - vectors, lists, matrices, data frames.
# To make vectors "x" "y" "year" and "names"
x <- c(2,3,7,9)
y <- c(9,7,3,2)
year <- 1990:1993
names <- c("payal", "shraddha", "kritika", "itida")
# Accessing the 1st and last elements of y --
y[1]
y[length(y)]
# To make a list "person" --
person <- list(name="payal", x=2, y=9, year=1990)
person
# Accessing things inside a list --
person$name
person$x
# To make a matrix, pasting together the columns "year" "x" and "y"
# The verb cbind() stands for "column bind"
cbind(year, x, y)
# To make a "data frame", which is a list of vectors of the same length --
D <- data.frame(names, year, x, y)
nrow(D)
# Accessing one of these vectors
D$names
# Accessing the last element of this vector
D$names[nrow(D)]
# Or equally,
D$names[length(D$names)]
# Goals: A first look at R objects - vectors, lists, matrices, data frames.
# To make vectors "x" "y" "year" and "names"
x <- c(2,3,7,9)
y <- c(9,7,3,2)
year <- 1990:1993
names <- c("payal", "shraddha", "kritika", "itida")
# Accessing the 1st and last elements of y --
y[1]
y[length(y)]
# To make a list "person" --
person <- list(name="payal", x=2, y=9, year=1990)
person
# Accessing things inside a list --
person$name
person$x
# To make a matrix, pasting together the columns "year" "x" and "y"
# The verb cbind() stands for "column bind"
cbind(year, x, y)
# To make a "data frame", which is a list of vectors of the same length --
D <- data.frame(names, year, x, y)
nrow(D)
# Accessing one of these vectors
D$names
# Accessing the last element of this vector
D$names[nrow(D)]
# Or equally,
D$names[length(D$names)]
source('~/ts.R', echo=TRUE)
source('~/ts.R', echo=TRUE)
EnvVar
Sys.getenv
Sys.getenv()
rexp(1, 0.2)
rexp(10, 0.2)
?rexp
plot(rexp(10, 0.2))
mean(rexp(40, 0.2))
mean(rexp(40, 0.2))
mean(rexp(40, 0.2))
mean(rexp(40, 0.2))
mean(rexp(40, 0.2))
mean(rexp(40, 0.2))
mean(rexp(40, 0.2))
mean(rexp(40, 0.2))
mean(rexp(40, 0.2))
mean(rexp(40, 0.2))
stdev
sd(rexp(40, 0.2))
lambda = 0.2
n = 40
for loop = (1:1000)
{
averages[loop] = mean(rexp(n, lambda))
}
hist(averages)
data <- rexp(n, lambda)
averages[0:1000] = 0
averages = 0
averages[0:1000] = 0
averages = 0
lambda = 0.2
n = 40
for loop = (1:1000)
{
averages[loop] = mean(rexp(n, lambda))
}
hist(averages)
averages = 0
lambda = 0.2
n = 40
for (loop in 1:1000)
{
averages[loop] = mean(rexp(n, lambda))
}
hist(averages)
data <- rexp(n, lambda)
averages = 0
lambda = 0.2
n = 40
for (loop in 1:1000)
{
averages[loop] = mean(rexp(n, lambda))
}
hist(averages)
data <- rexp(n, lambda)
averages = 0
lambda = 0.2
n = 40
for (loop in 1:1000)
{
averages[loop] = mean(rexp(n, lambda))
}
hist(averages)
data <- rexp(n, lambda)
averages = 0
lambda = 0.2
n = 40
for (loop in 1:1000)
{
averages[loop] = mean(rexp(n, lambda))
}
hist(averages)
data <- rexp(n, lambda)
averages = 0
lambda = 0.2
n = 40
for (loop in 1:1000)
{
averages[loop] = mean(rexp(n, lambda))
}
hist(averages)
data <- rexp(n, lambda)
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
x <- seq(0,12, length=1000)
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
y <- dnorm(x, mean=10, sd=3)
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
?sd
?curve
?dnorm
sample = 0
lambda = 0.2
n = 40
for (loop in 1:1000)
{
sample[loop] = mean(rexp(n, lambda))
}
sample_adjusted = sample / 100
?ylim
summary(ToothGrowth)
ToothGrowth
lambda = 0.2
quantile(ToothGrowth$len)
hist(quantile(ToothGrowth$len))
hist(quantile(ToothGrowth$len), breaks=30)
hist(ToothGrowth$len)
vc_data <- Toothgrowth$supp==VC
vc_data <- ToothGrowth$supp==VC
vc_data <- ToothGrowth$supp=="VC"
vc_data
/subset
?subset
vc_data <- subset(ToothGrowth, ToothGrowth$supp=="VC")
vc_data
vc_data <- subset(ToothGrowth, ToothGrowth$supp=="VC")
oj_data <- subset(ToothGrowth, ToothGrowth$supp=="OJ")
dose1 <- subset(ToothGrowth, ToothGrowth$dose==0.5)
dose2 <- subset(ToothGrowth, ToothGrowth$dose==1.0)
dose3 <- subset(ToothGrowth, ToothGrowth$dose==2.0)
?plot
order(oj_data)
order(oj_data, oj_data$len)
?order
order(oj_data$len)
sort.list(oj_data$len)
s_oj_data <- oj_data[order(oj_data$len),]
s_oj_data
?abline
s_vc_data
s_vc_data <- vc_data[order(vc_data$len),]
s_oj_data <- oj_data[order(oj_data$len),]
s_vc_data
s_oj_data
vc_delta <- qt(0.975,9) * sd(vc_data$len)/sqrt(9)
vc_delta <- qt(0.975,29) * sd(vc_data$len)/sqrt(29)
Sys.getenv()
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lsfit(x,w)
?lm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
install.packages("UsingR")
mean(x)
x
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
z = x * y
x
y
z = x * w
z
mean(z)
x1 = x - .0025
x1
x1 = x * x
mean(x1)
x <- c(0.18, -1.54, 0.42, 0.95)
x = x - .1471
x = x * x
mean(x)
lm(I(x - mean(x)) ~ I(y - mean(y)) - 1)
lm(I(x - mean(x)) ~ I(y - mean(y)) - 1, data=galton)
lm(I(x - mean(x)) ~ I(y - mean(y)) - 1)
lm(I(x - mean(x))~ I(y - mean(y)) - 1)
?lm
z = cbind(x,y)
cbind(x,y)
z
x
y
x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
z = cbind(x,y)
z
lm(I(x - mean(x)) ~ I(y - mean(y)) - 1, data=z)
lm(I(x - mean(x)) ~ I(y - mean(y)) - 1)
lm(I(x) ~ I(y) - 1)
data(mcars)
data(mtcars)
mtcars
lm(I(mpg - mean(mpg)) ~ I(wt - mean(wt)) - 1, data = mtcars)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
install.packages("Rcharts")
install.packages("rCharts")
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("base64enc")
install_github("ramnathv/rCharts@dev")
install_github("ramnathv/rMaps")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
library("rCharts")
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
,
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
?manipulate
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
install.packages("shinyapps")
library(shiny)
setwd("../Downloads")
runApp()
runApp()
devtools::install_github("rstudio/shinyapps")
runApp()
shinyapps::setAccountInfo(
name="gman",
token="C32E0C5FFD4A4910FDC92081732E4074",
secret="<SECRET>")
shinyapps::setAccountInfo(name='gman', token='C32E0C5FFD4A4910FDC92081732E4074', secret='HMZePBXb4z9NemG7MzxmE+WZ4Jaj8ZYehUIsJQzV')
shinyapps::setAccountInfo(name='gman', token='C32E0C5FFD4A4910FDC92081732E4074', secret='HMZePBXb4z9NemG7MzxmE+WZ4Jaj8ZYehUIsJQzV')
runApp()
setwd("CourseraDA")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
setwd("..")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("CourseraDA")
runApp()
install_github("slidify","ramnathv")
library(devtools)
install_github("slidify","ramnathv")
library(slidify)
getwd()
setwd("..")
setwd("CourseraDA2")
author("Course Project Deck")
setwd("Course Project Deck")
